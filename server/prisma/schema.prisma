generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  passwordHash      String
  firstName         String
  lastName          String
  faculty           String
  department        String
  classYear         String
  themeColor        String? 
  profilePictureUrl String?
  points            Int       @default(0)
  role              Role      @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  notes             Note[]
  ratings           Rating[]
  favorites         Favorite[]
  comments          Comment[]
  forumThreads      ForumThread[]
  forumPosts        ForumPost[]
  groupMemberships  GroupMember[]
  groupPosts        GroupPost[]
  forumLikes        ForumLike[]
  groupPostComments GroupPostComment[]
  announcements     Announcement[]
  favoriteCategories FavoriteCategory[]
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Note {
  id             Int        @id @default(autoincrement())
  user           User       @relation(fields: [userId], references: [id])
  userId         Int
  title          String
  description    String
  course         String
  type           NoteType
  filePath       String
  fileMime       String
  fileSize       Int
  downloadsCount Int        @default(0)
  avgRating      Float?     
  isHidden       Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  tags           NoteTag[]
  ratings        Rating[]
  favorites      Favorite[]
  comments       Comment[]
}

enum NoteType {
  pdf
  image
  doc
  other
}

model Tag {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  notes NoteTag[]
}

model NoteTag {
  note   Note @relation(fields: [noteId], references: [id])
  noteId Int
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  Int
  @@id([noteId, tagId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  note      Note     @relation(fields: [noteId], references: [id])
  noteId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  score     Int
  createdAt DateTime @default(now())
  @@unique([noteId, userId])
}

model Favorite {
  user     User             @relation(fields: [userId], references: [id])
  userId   Int
  note     Note             @relation(fields: [noteId], references: [id])
  noteId   Int
  category FavoriteCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  createdAt DateTime @default(now())
  @@id([userId, noteId])
}

model FavoriteCategory {
  id        Int        @id @default(autoincrement())
  name      String
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  favorites Favorite[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  note      Note      @relation(fields: [noteId], references: [id])
  noteId    Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId  Int?
  replies   Comment[] @relation("CommentToComment")
  content   String
  isHidden  Boolean   @default(false)
  createdAt DateTime  @default(now())
}

model ForumThread {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  body      String
  isHidden  Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  posts     ForumPost[]
}

model ForumPost {
  id        Int          @id @default(autoincrement())
  thread    ForumThread  @relation(fields: [threadId], references: [id])
  threadId  Int
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  body      String
  isHidden  Boolean      @default(false)
  createdAt DateTime     @default(now())
  likes     ForumLike[]
}

model ForumLike {
  user    User      @relation(fields: [userId], references: [id])
  userId  Int
  post    ForumPost @relation(fields: [postId], references: [id])
  postId  Int
  createdAt DateTime @default(now())
  @@id([userId, postId])
}

model ClassGroup {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  faculty     String?
  department  String?
  classYear   String?
  isPrivate   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  members     GroupMember[]
  posts       GroupPost[]
}

model GroupMember {
  group     ClassGroup @relation(fields: [groupId], references: [id])
  groupId   Int
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  role      GroupRole  @default(MEMBER)
  joinedAt  DateTime   @default(now())
  @@id([groupId, userId])
}

enum GroupRole {
  MEMBER
  OWNER
  MODERATOR
}

model GroupPost {
  id        Int        @id @default(autoincrement())
  group     ClassGroup @relation(fields: [groupId], references: [id])
  groupId   Int
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  body      String
  isHidden  Boolean    @default(false)
  createdAt DateTime   @default(now())
  comments  GroupPostComment[]
}

model GroupPostComment {
  id        Int       @id @default(autoincrement())
  post      GroupPost @relation(fields: [postId], references: [id])
  postId    Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  body      String
  isHidden  Boolean   @default(false)
  createdAt DateTime  @default(now())
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  isPinned  Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

